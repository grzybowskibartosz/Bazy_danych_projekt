{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barto\\\\PycharmProjects\\\\bazy danych v1.0\\\\rejestracja_internetowa\\\\frontend_part\\\\src\\\\DostepneTerminy.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Calendar from 'react-calendar';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DostepneTerminy = () => {\n  _s();\n  const {\n    lekarzId\n  } = useParams();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [dostepneTerminy, setDostepneTerminy] = useState([]);\n  useEffect(() => {\n    if (lekarzId) {\n      const rok = selectedDate.getFullYear();\n      const miesiac = selectedDate.getMonth() + 1;\n      const dzien = selectedDate.getDate();\n      axios.get(`http://localhost:8000/api/dostepne-terminy/${lekarzId}/${rok}/${miesiac}/${dzien}/`).then(response => {\n        // Pobierz dostępne terminy z API\n        const dostepneZAPI = response.data.dostepne_terminy;\n\n        // Simulacja wygenerowania wszystkich terminów dla danego dnia\n        const wszystkieTerminy = generujWszystkieTerminyDlaDnia(selectedDate);\n\n        // Odfiltruj dostępne terminy od zajętych\n        const wolneTerminy = wszystkieTerminy.filter(termin => {\n          // Sprawdź, czy termin nie istnieje w dostępnych z API\n          return !dostepneZAPI.some(dostepny => dostepny.data_i_godzina === termin.data_i_godzina);\n        });\n        setDostepneTerminy(wolneTerminy);\n      }).catch(error => console.error('Błąd pobierania dostępnych terminów:', error));\n    }\n  }, [lekarzId, selectedDate]);\n  const handleDateChange = date => {\n    setSelectedDate(date);\n  };\n\n  // Funkcja do generowania wszystkich terminów dla danego dnia (symulacja)\n  const generujWszystkieTerminyDlaDnia = data => {\n    const godzinyTerminow = ['09:00', '10:00', '11:00', '14:00', '15:00', '16:00']; // Dodaj inne godziny według potrzeb\n    return godzinyTerminow.map(godzina => {\n      const dataIGodzina = new Date(data);\n      const [godzinaStr, minutaStr] = godzina.split(':');\n      dataIGodzina.setHours(Number(godzinaStr));\n      dataIGodzina.setMinutes(Number(minutaStr));\n      return {\n        data_i_godzina: dataIGodzina.toISOString()\n      };\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dost\\u0119pne terminy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n      onChange: handleDateChange,\n      value: selectedDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), dostepneTerminy.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Dost\\u0119pne terminy na \", selectedDate.toLocaleDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: dostepneTerminy.map((termin, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Data i godzina: \", new Date(termin.data_i_godzina).toLocaleString()]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Brak dost\\u0119pnych termin\\xF3w na wybrany dzie\\u0144.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(DostepneTerminy, \"qORqBWGMgcuMjG+MTFb5JFG3LV4=\", false, function () {\n  return [useParams];\n});\n_c = DostepneTerminy;\nexport default DostepneTerminy;\nvar _c;\n$RefreshReg$(_c, \"DostepneTerminy\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","axios","useParams","jsxDEV","_jsxDEV","DostepneTerminy","_s","lekarzId","selectedDate","setSelectedDate","Date","dostepneTerminy","setDostepneTerminy","rok","getFullYear","miesiac","getMonth","dzien","getDate","get","then","response","dostepneZAPI","data","dostepne_terminy","wszystkieTerminy","generujWszystkieTerminyDlaDnia","wolneTerminy","filter","termin","some","dostepny","data_i_godzina","catch","error","console","handleDateChange","date","godzinyTerminow","map","godzina","dataIGodzina","godzinaStr","minutaStr","split","setHours","Number","setMinutes","toISOString","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","value","length","toLocaleDateString","index","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/barto/PycharmProjects/bazy danych v1.0/rejestracja_internetowa/frontend_part/src/DostepneTerminy.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst DostepneTerminy = () => {\r\n  const { lekarzId } = useParams();\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [dostepneTerminy, setDostepneTerminy] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (lekarzId) {\r\n      const rok = selectedDate.getFullYear();\r\n      const miesiac = selectedDate.getMonth() + 1;\r\n      const dzien = selectedDate.getDate();\r\n\r\n      axios.get(`http://localhost:8000/api/dostepne-terminy/${lekarzId}/${rok}/${miesiac}/${dzien}/`)\r\n        .then(response => {\r\n          // Pobierz dostępne terminy z API\r\n          const dostepneZAPI = response.data.dostepne_terminy;\r\n\r\n          // Simulacja wygenerowania wszystkich terminów dla danego dnia\r\n          const wszystkieTerminy = generujWszystkieTerminyDlaDnia(selectedDate);\r\n\r\n          // Odfiltruj dostępne terminy od zajętych\r\n          const wolneTerminy = wszystkieTerminy.filter(termin => {\r\n            // Sprawdź, czy termin nie istnieje w dostępnych z API\r\n            return !dostepneZAPI.some(dostepny => dostepny.data_i_godzina === termin.data_i_godzina);\r\n          });\r\n\r\n          setDostepneTerminy(wolneTerminy);\r\n        })\r\n        .catch(error => console.error('Błąd pobierania dostępnych terminów:', error));\r\n    }\r\n  }, [lekarzId, selectedDate]);\r\n\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n\r\n  // Funkcja do generowania wszystkich terminów dla danego dnia (symulacja)\r\n  const generujWszystkieTerminyDlaDnia = (data) => {\r\n    const godzinyTerminow = ['09:00', '10:00', '11:00', '14:00', '15:00', '16:00']; // Dodaj inne godziny według potrzeb\r\n    return godzinyTerminow.map(godzina => {\r\n      const dataIGodzina = new Date(data);\r\n      const [godzinaStr, minutaStr] = godzina.split(':');\r\n      dataIGodzina.setHours(Number(godzinaStr));\r\n      dataIGodzina.setMinutes(Number(minutaStr));\r\n      return { data_i_godzina: dataIGodzina.toISOString() };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Dostępne terminy</h1>\r\n      <Calendar onChange={handleDateChange} value={selectedDate} />\r\n      {dostepneTerminy.length > 0 ? (\r\n        <div>\r\n          <h2>Dostępne terminy na {selectedDate.toLocaleDateString()}</h2>\r\n          <ul>\r\n            {dostepneTerminy.map((termin, index) => (\r\n              <li key={index}>\r\n                Data i godzina: {new Date(termin.data_i_godzina).toLocaleString()}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ) : (\r\n        <p>Brak dostępnych terminów na wybrany dzień.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DostepneTerminy;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}