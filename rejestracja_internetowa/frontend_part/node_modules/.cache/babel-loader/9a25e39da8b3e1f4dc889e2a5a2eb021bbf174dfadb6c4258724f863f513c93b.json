{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barto\\\\PycharmProjects\\\\bazy danych v1.0\\\\rejestracja_internetowa\\\\frontend_part\\\\src\\\\DostepneTerminy.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Calendar from 'react-calendar';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DostepneTerminy = () => {\n  _s();\n  const {\n    lekarzId\n  } = useParams();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [dostepneTerminy, setDostepneTerminy] = useState([]);\n  useEffect(() => {\n    if (lekarzId) {\n      const rok = selectedDate.getFullYear();\n      const miesiac = selectedDate.getMonth() + 1;\n      const dzien = selectedDate.getDate();\n\n      // Automatyczne generowanie godzin co 20 minut od 8:00 do 16:00 codziennie od poniedziałku do piątku\n      const godzinyTerminow = generujGodzinyTerminow();\n\n      // Pobieranie wizyt z bazy danych dla danego lekarza na wybrany dzień\n      axios.get(`http://localhost:8000/api/zajete-terminy/${lekarzId}/${rok}/${miesiac}/${dzien}/`).then(response => {\n        const wizytyZajete = response.data.wizyty;\n\n        // Filtrowanie dostępnych terminów na podstawie zajętych wizyt\n        const dostepneTerminyFiltrowane = godzinyTerminow.filter(godzinaTerminu => {\n          const dataIGodzina = new Date(selectedDate);\n          const [godzinaStr, minutaStr] = godzinaTerminu.split(':');\n          dataIGodzina.setHours(Number(godzinaStr));\n          dataIGodzina.setMinutes(Number(minutaStr));\n\n          // Sprawdzanie, czy termin nie jest zajęty\n          return !wizytyZajete.some(wizyta => {\n            const dataIGodzinaWizyty = new Date(wizyta.data_i_godzina);\n            return dataIGodzinaWizyty.getTime() === dataIGodzina.getTime();\n          });\n        });\n        setDostepneTerminy(dostepneTerminyFiltrowane);\n      }).catch(error => console.error('Błąd pobierania wizyt:', error));\n    }\n  }, [lekarzId, selectedDate]);\n  const handleDateChange = date => {\n    setSelectedDate(date);\n  };\n\n  // Funkcja do automatycznego generowania godzin co 20 minut od 8:00 do 16:00 codziennie od poniedziałku do piątku\n  const generujGodzinyTerminow = () => {\n    const godziny = [];\n    for (let godzina = 8; godzina < 16; godzina++) {\n      for (let minuta = 0; minuta < 60; minuta += 20) {\n        godziny.push(`${godzina.toString().padStart(2, '0')}:${minuta.toString().padStart(2, '0')}`);\n      }\n    }\n    return godziny;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dost\\u0119pne terminy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n      onChange: handleDateChange,\n      value: selectedDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), dostepneTerminy.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Dost\\u0119pne terminy na \", selectedDate.toLocaleDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: dostepneTerminy.map((termin, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Data i godzina: \", new Date(termin.data_i_godzina).toLocaleString()]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Brak dost\\u0119pnych termin\\xF3w na wybrany dzie\\u0144.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(DostepneTerminy, \"qORqBWGMgcuMjG+MTFb5JFG3LV4=\", false, function () {\n  return [useParams];\n});\n_c = DostepneTerminy;\nexport default DostepneTerminy;\nvar _c;\n$RefreshReg$(_c, \"DostepneTerminy\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","axios","useParams","jsxDEV","_jsxDEV","DostepneTerminy","_s","lekarzId","selectedDate","setSelectedDate","Date","dostepneTerminy","setDostepneTerminy","rok","getFullYear","miesiac","getMonth","dzien","getDate","godzinyTerminow","generujGodzinyTerminow","get","then","response","wizytyZajete","data","wizyty","dostepneTerminyFiltrowane","filter","godzinaTerminu","dataIGodzina","godzinaStr","minutaStr","split","setHours","Number","setMinutes","some","wizyta","dataIGodzinaWizyty","data_i_godzina","getTime","catch","error","console","handleDateChange","date","godziny","godzina","minuta","push","toString","padStart","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","value","length","toLocaleDateString","map","termin","index","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/barto/PycharmProjects/bazy danych v1.0/rejestracja_internetowa/frontend_part/src/DostepneTerminy.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst DostepneTerminy = () => {\r\n  const { lekarzId } = useParams();\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [dostepneTerminy, setDostepneTerminy] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (lekarzId) {\r\n      const rok = selectedDate.getFullYear();\r\n      const miesiac = selectedDate.getMonth() + 1;\r\n      const dzien = selectedDate.getDate();\r\n\r\n      // Automatyczne generowanie godzin co 20 minut od 8:00 do 16:00 codziennie od poniedziałku do piątku\r\n      const godzinyTerminow = generujGodzinyTerminow();\r\n\r\n      // Pobieranie wizyt z bazy danych dla danego lekarza na wybrany dzień\r\n      axios\r\n        .get(`http://localhost:8000/api/zajete-terminy/${lekarzId}/${rok}/${miesiac}/${dzien}/`)\r\n        .then((response) => {\r\n          const wizytyZajete = response.data.wizyty;\r\n\r\n          // Filtrowanie dostępnych terminów na podstawie zajętych wizyt\r\n          const dostepneTerminyFiltrowane = godzinyTerminow.filter((godzinaTerminu) => {\r\n            const dataIGodzina = new Date(selectedDate);\r\n            const [godzinaStr, minutaStr] = godzinaTerminu.split(':');\r\n            dataIGodzina.setHours(Number(godzinaStr));\r\n            dataIGodzina.setMinutes(Number(minutaStr));\r\n\r\n            // Sprawdzanie, czy termin nie jest zajęty\r\n            return !wizytyZajete.some((wizyta) => {\r\n              const dataIGodzinaWizyty = new Date(wizyta.data_i_godzina);\r\n              return dataIGodzinaWizyty.getTime() === dataIGodzina.getTime();\r\n            });\r\n          });\r\n\r\n          setDostepneTerminy(dostepneTerminyFiltrowane);\r\n        })\r\n        .catch((error) => console.error('Błąd pobierania wizyt:', error));\r\n    }\r\n  }, [lekarzId, selectedDate]);\r\n\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n\r\n  // Funkcja do automatycznego generowania godzin co 20 minut od 8:00 do 16:00 codziennie od poniedziałku do piątku\r\n  const generujGodzinyTerminow = () => {\r\n    const godziny = [];\r\n    for (let godzina = 8; godzina < 16; godzina++) {\r\n      for (let minuta = 0; minuta < 60; minuta += 20) {\r\n        godziny.push(`${godzina.toString().padStart(2, '0')}:${minuta.toString().padStart(2, '0')}`);\r\n      }\r\n    }\r\n    return godziny;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Dostępne terminy</h1>\r\n      <Calendar onChange={handleDateChange} value={selectedDate} />\r\n      {dostepneTerminy.length > 0 ? (\r\n        <div>\r\n          <h2>Dostępne terminy na {selectedDate.toLocaleDateString()}</h2>\r\n          <ul>\r\n            {dostepneTerminy.map((termin, index) => (\r\n              <li key={index}>\r\n                Data i godzina: {new Date(termin.data_i_godzina).toLocaleString()}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ) : (\r\n        <p>Brak dostępnych terminów na wybrany dzień.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DostepneTerminy;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM;IAAEC;EAAS,CAAC,GAAGL,SAAS,CAAC,CAAC;EAChC,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,IAAIY,IAAI,CAAC,CAAC,CAAC;EAC5D,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAE1DC,SAAS,CAAC,MAAM;IACd,IAAIQ,QAAQ,EAAE;MACZ,MAAMM,GAAG,GAAGL,YAAY,CAACM,WAAW,CAAC,CAAC;MACtC,MAAMC,OAAO,GAAGP,YAAY,CAACQ,QAAQ,CAAC,CAAC,GAAG,CAAC;MAC3C,MAAMC,KAAK,GAAGT,YAAY,CAACU,OAAO,CAAC,CAAC;;MAEpC;MACA,MAAMC,eAAe,GAAGC,sBAAsB,CAAC,CAAC;;MAEhD;MACAnB,KAAK,CACFoB,GAAG,CAAE,4CAA2Cd,QAAS,IAAGM,GAAI,IAAGE,OAAQ,IAAGE,KAAM,GAAE,CAAC,CACvFK,IAAI,CAAEC,QAAQ,IAAK;QAClB,MAAMC,YAAY,GAAGD,QAAQ,CAACE,IAAI,CAACC,MAAM;;QAEzC;QACA,MAAMC,yBAAyB,GAAGR,eAAe,CAACS,MAAM,CAAEC,cAAc,IAAK;UAC3E,MAAMC,YAAY,GAAG,IAAIpB,IAAI,CAACF,YAAY,CAAC;UAC3C,MAAM,CAACuB,UAAU,EAAEC,SAAS,CAAC,GAAGH,cAAc,CAACI,KAAK,CAAC,GAAG,CAAC;UACzDH,YAAY,CAACI,QAAQ,CAACC,MAAM,CAACJ,UAAU,CAAC,CAAC;UACzCD,YAAY,CAACM,UAAU,CAACD,MAAM,CAACH,SAAS,CAAC,CAAC;;UAE1C;UACA,OAAO,CAACR,YAAY,CAACa,IAAI,CAAEC,MAAM,IAAK;YACpC,MAAMC,kBAAkB,GAAG,IAAI7B,IAAI,CAAC4B,MAAM,CAACE,cAAc,CAAC;YAC1D,OAAOD,kBAAkB,CAACE,OAAO,CAAC,CAAC,KAAKX,YAAY,CAACW,OAAO,CAAC,CAAC;UAChE,CAAC,CAAC;QACJ,CAAC,CAAC;QAEF7B,kBAAkB,CAACe,yBAAyB,CAAC;MAC/C,CAAC,CAAC,CACDe,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC,CAAC;IACrE;EACF,CAAC,EAAE,CAACpC,QAAQ,EAAEC,YAAY,CAAC,CAAC;EAE5B,MAAMqC,gBAAgB,GAAIC,IAAI,IAAK;IACjCrC,eAAe,CAACqC,IAAI,CAAC;EACvB,CAAC;;EAED;EACA,MAAM1B,sBAAsB,GAAGA,CAAA,KAAM;IACnC,MAAM2B,OAAO,GAAG,EAAE;IAClB,KAAK,IAAIC,OAAO,GAAG,CAAC,EAAEA,OAAO,GAAG,EAAE,EAAEA,OAAO,EAAE,EAAE;MAC7C,KAAK,IAAIC,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAG,EAAE,EAAEA,MAAM,IAAI,EAAE,EAAE;QAC9CF,OAAO,CAACG,IAAI,CAAE,GAAEF,OAAO,CAACG,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGH,MAAM,CAACE,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,EAAC,CAAC;MAC9F;IACF;IACA,OAAOL,OAAO;EAChB,CAAC;EAED,oBACE3C,OAAA;IAAAiD,QAAA,gBACEjD,OAAA;MAAAiD,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBrD,OAAA,CAACJ,QAAQ;MAAC0D,QAAQ,EAAEb,gBAAiB;MAACc,KAAK,EAAEnD;IAAa;MAAA8C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC5D9C,eAAe,CAACiD,MAAM,GAAG,CAAC,gBACzBxD,OAAA;MAAAiD,QAAA,gBACEjD,OAAA;QAAAiD,QAAA,GAAI,2BAAoB,EAAC7C,YAAY,CAACqD,kBAAkB,CAAC,CAAC;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAChErD,OAAA;QAAAiD,QAAA,EACG1C,eAAe,CAACmD,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBACjC5D,OAAA;UAAAiD,QAAA,GAAgB,kBACE,EAAC,IAAI3C,IAAI,CAACqD,MAAM,CAACvB,cAAc,CAAC,CAACyB,cAAc,CAAC,CAAC;QAAA,GAD1DD,KAAK;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,gBAENrD,OAAA;MAAAiD,QAAA,EAAG;IAA0C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACjD;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACnD,EAAA,CA3EID,eAAe;EAAA,QACEH,SAAS;AAAA;AAAAgE,EAAA,GAD1B7D,eAAe;AA6ErB,eAAeA,eAAe;AAAC,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}