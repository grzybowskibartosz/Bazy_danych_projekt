{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barto\\\\PycharmProjects\\\\bazy danych v1.0\\\\rejestracja_internetowa\\\\frontend_part\\\\src\\\\Rezerwacje.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Rezerwacje = () => {\n  _s();\n  const [pacjent, setPacjent] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [userInfo, setUserInfo] = useState({});\n  const [lekarz, setLekarz] = useState({});\n  const [gabinet, setGabinet] = useState({});\n  const [opisDolegliwosci, setOpisDolegliwosci] = useState('');\n  const {\n    lekarzId,\n    rok,\n    miesiac,\n    dzien,\n    godzina,\n    minuta\n  } = useParams();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const authToken = localStorage.getItem('authToken');\n        if (authToken) {\n          const [userInfoResponse, lekarzResponse, gabinetResponse] = await Promise.all([axios.get('http://localhost:8000/api/get_user_info/', {\n            headers: {\n              Authorization: `Token ${authToken}`\n            }\n          }), axios.get(`http://localhost:8000/api/lekarze/${lekarzId}/`), axios.get(`http://localhost:8000/api/lekarze/${lekarzId}/gabinety/`)]);\n          const userInfo = userInfoResponse.data;\n          const lekarzData = lekarzResponse.data;\n          const gabinetData = gabinetResponse.data;\n          setUserInfo(userInfo);\n          setPacjent(userInfo.user_data);\n          setLekarz(lekarzData);\n          setGabinet(gabinetData);\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error('Błąd pobierania informacji o użytkowniku:', error);\n      }\n    };\n    fetchData();\n  }, [lekarzId]);\n  const handleOpisChange = event => {\n    setOpisDolegliwosci(event.target.value);\n  };\n  const handleRezerwacjaClick = async () => {\n    if (!rok || !miesiac || !dzien || !godzina || !minuta || !lekarzId || !pacjent.id || !opisDolegliwosci) {\n      console.error('Wszystkie pola muszą być uzupełnione');\n      return;\n    }\n    try {\n      const authToken = localStorage.getItem('authToken');\n      if (authToken) {\n        const gabinetId = gabinet.gabinety.length > 0 ? gabinet.gabinety[0].id : null;\n        await axios.post('http://localhost:8000/api/rezerwacje/', {\n          data_i_godzina: `${rok}-${miesiac}-${dzien} ${godzina}:${minuta}:00`,\n          lekarz_id: lekarzId,\n          pacjent_id: pacjent.id,\n          opis: opisDolegliwosci,\n          gabinet_id: gabinetId\n        }, {\n          headers: {\n            Authorization: `Token ${authToken}`\n          }\n        });\n\n        // Przekieruj na stronę potwierdzenia rezerwacji lub inny widok\n        // window.location.href = '/potwierdzenie-rezerwacji'; // Dodaj odpowiednią ścieżkę\n      }\n    } catch (error) {\n      console.error('Błąd rezerwacji wizyty:', error);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u0141adowanie danych...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(Rezerwacje, \"U41qY1GtuQqTd+aEm0rIYfZHXFY=\", false, function () {\n  return [useParams];\n});\n_c = Rezerwacje;\nexport default Rezerwacje;\nvar _c;\n$RefreshReg$(_c, \"Rezerwacje\");","map":{"version":3,"names":["React","useState","useEffect","axios","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","Rezerwacje","_s","pacjent","setPacjent","loading","setLoading","userInfo","setUserInfo","lekarz","setLekarz","gabinet","setGabinet","opisDolegliwosci","setOpisDolegliwosci","lekarzId","rok","miesiac","dzien","godzina","minuta","fetchData","authToken","localStorage","getItem","userInfoResponse","lekarzResponse","gabinetResponse","Promise","all","get","headers","Authorization","data","lekarzData","gabinetData","user_data","error","console","handleOpisChange","event","target","value","handleRezerwacjaClick","id","gabinetId","gabinety","length","post","data_i_godzina","lekarz_id","pacjent_id","opis","gabinet_id","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/barto/PycharmProjects/bazy danych v1.0/rejestracja_internetowa/frontend_part/src/Rezerwacje.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst Rezerwacje = () => {\r\n  const [pacjent, setPacjent] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n  const [userInfo, setUserInfo] = useState({});\r\n  const [lekarz, setLekarz] = useState({});\r\n  const [gabinet, setGabinet] = useState({});\r\n  const [opisDolegliwosci, setOpisDolegliwosci] = useState('');\r\n  const { lekarzId, rok, miesiac, dzien, godzina, minuta } = useParams();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const authToken = localStorage.getItem('authToken');\r\n\r\n        if (authToken) {\r\n          const [userInfoResponse, lekarzResponse, gabinetResponse] = await Promise.all([\r\n            axios.get('http://localhost:8000/api/get_user_info/', {\r\n              headers: {\r\n                Authorization: `Token ${authToken}`,\r\n              },\r\n            }),\r\n            axios.get(`http://localhost:8000/api/lekarze/${lekarzId}/`),\r\n            axios.get(`http://localhost:8000/api/lekarze/${lekarzId}/gabinety/`),\r\n          ]);\r\n\r\n          const userInfo = userInfoResponse.data;\r\n          const lekarzData = lekarzResponse.data;\r\n          const gabinetData = gabinetResponse.data;\r\n\r\n          setUserInfo(userInfo);\r\n          setPacjent(userInfo.user_data);\r\n          setLekarz(lekarzData);\r\n          setGabinet(gabinetData);\r\n\r\n          setLoading(false);\r\n        }\r\n      } catch (error) {\r\n        console.error('Błąd pobierania informacji o użytkowniku:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [lekarzId]);\r\n\r\n  const handleOpisChange = (event) => {\r\n    setOpisDolegliwosci(event.target.value);\r\n  };\r\n\r\n  const handleRezerwacjaClick = async () => {\r\n    if (!rok || !miesiac || !dzien || !godzina || !minuta || !lekarzId || !pacjent.id || !opisDolegliwosci) {\r\n      console.error('Wszystkie pola muszą być uzupełnione');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const authToken = localStorage.getItem('authToken');\r\n\r\n      if (authToken) {\r\n        const gabinetId = gabinet.gabinety.length > 0 ? gabinet.gabinety[0].id : null;\r\n\r\n        await axios.post('http://localhost:8000/api/rezerwacje/', {\r\n          data_i_godzina: `${rok}-${miesiac}-${dzien} ${godzina}:${minuta}:00`,\r\n          lekarz_id: lekarzId,\r\n          pacjent_id: pacjent.id,\r\n          opis: opisDolegliwosci,\r\n          gabinet_id: gabinetId,\r\n        }, {\r\n          headers: {\r\n            Authorization: `Token ${authToken}`,\r\n          },\r\n        });\r\n\r\n        // Przekieruj na stronę potwierdzenia rezerwacji lub inny widok\r\n        // window.location.href = '/potwierdzenie-rezerwacji'; // Dodaj odpowiednią ścieżkę\r\n      }\r\n    } catch (error) {\r\n      console.error('Błąd rezerwacji wizyty:', error);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <p>Ładowanie danych...</p>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/*... renderowanie danych */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Rezerwacje;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}