{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barto\\\\PycharmProjects\\\\bazy danych v1.0\\\\rejestracja_internetowa\\\\frontend_part\\\\src\\\\DostepneTerminy.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Calendar from 'react-calendar';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generujGodzinyTerminow = () => {\n  const godziny = [];\n  for (let godzina = 8; godzina <= 16; godzina++) {\n    for (let minuta = 0; minuta < 60; minuta += 20) {\n      godziny.push(`${godzina}:${minuta === 0 ? '00' : minuta}`);\n    }\n  }\n  return godziny;\n};\nconst DostepneTerminy = () => {\n  _s();\n  const {\n    lekarzId\n  } = useParams();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [dostepneTerminy, setDostepneTerminy] = useState([]);\n  useEffect(() => {\n    if (lekarzId) {\n      const rok = selectedDate.getFullYear();\n      const miesiac = selectedDate.getMonth() + 1;\n      const dzien = selectedDate.getDate();\n\n      // Automatyczne generowanie godzin co 20 minut od 8:00 do 16:00 codziennie od poniedziałku do piątku\n      const godzinyTerminow = generujGodzinyTerminow();\n\n      // Pobieranie zajętych terminów z bazy danych dla danego lekarza na wybrany dzień\n      axios.get(`http://localhost:8000/api/zajete-terminy/${lekarzId}/${rok}/${miesiac}/${dzien}/`).then(response => {\n        var _response$data;\n        const zajeteTerminy = ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.zajete_terminy) || [];\n\n        // Usuwamy zajęte terminy z wygenerowanych godzin\n        const dostepneTerminy = godzinyTerminow.filter(godzinaTerminu => !zajeteTerminy.includes(godzinaTerminu));\n        setDostepneTerminy(dostepneTerminy);\n      }).catch(error => console.error('Błąd pobierania zajętych terminów:', error));\n    }\n  }, [lekarzId, selectedDate]);\n  const handleDateChange = date => {\n    setSelectedDate(date);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dost\\u0119pne terminy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n      onChange: handleDateChange,\n      value: selectedDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), dostepneTerminy.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Dost\\u0119pne terminy na \", selectedDate.toLocaleDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: dostepneTerminy.map((termin, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Data i godzina: \", termin]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 3\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Brak dost\\u0119pnych termin\\xF3w na wybrany dzie\\u0144.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(DostepneTerminy, \"qORqBWGMgcuMjG+MTFb5JFG3LV4=\", false, function () {\n  return [useParams];\n});\n_c = DostepneTerminy;\nexport default DostepneTerminy;\nvar _c;\n$RefreshReg$(_c, \"DostepneTerminy\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","axios","useParams","jsxDEV","_jsxDEV","generujGodzinyTerminow","godziny","godzina","minuta","push","DostepneTerminy","_s","lekarzId","selectedDate","setSelectedDate","Date","dostepneTerminy","setDostepneTerminy","rok","getFullYear","miesiac","getMonth","dzien","getDate","godzinyTerminow","get","then","response","_response$data","zajeteTerminy","data","zajete_terminy","filter","godzinaTerminu","includes","catch","error","console","handleDateChange","date","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","value","length","toLocaleDateString","map","termin","index","_c","$RefreshReg$"],"sources":["C:/Users/barto/PycharmProjects/bazy danych v1.0/rejestracja_internetowa/frontend_part/src/DostepneTerminy.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst generujGodzinyTerminow = () => {\r\n  const godziny = [];\r\n  for (let godzina = 8; godzina <= 16; godzina++) {\r\n    for (let minuta = 0; minuta < 60; minuta += 20) {\r\n      godziny.push(`${godzina}:${minuta === 0 ? '00' : minuta}`);\r\n    }\r\n  }\r\n  return godziny;\r\n};\r\n\r\nconst DostepneTerminy = () => {\r\n  const { lekarzId } = useParams();\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [dostepneTerminy, setDostepneTerminy] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (lekarzId) {\r\n      const rok = selectedDate.getFullYear();\r\n      const miesiac = selectedDate.getMonth() + 1;\r\n      const dzien = selectedDate.getDate();\r\n\r\n      // Automatyczne generowanie godzin co 20 minut od 8:00 do 16:00 codziennie od poniedziałku do piątku\r\n      const godzinyTerminow = generujGodzinyTerminow();\r\n\r\n      // Pobieranie zajętych terminów z bazy danych dla danego lekarza na wybrany dzień\r\n      axios\r\n        .get(`http://localhost:8000/api/zajete-terminy/${lekarzId}/${rok}/${miesiac}/${dzien}/`)\r\n        .then((response) => {\r\n          const zajeteTerminy = response.data?.zajete_terminy || [];\r\n\r\n          // Usuwamy zajęte terminy z wygenerowanych godzin\r\n          const dostepneTerminy = godzinyTerminow.filter(\r\n            (godzinaTerminu) => !zajeteTerminy.includes(godzinaTerminu)\r\n          );\r\n\r\n          setDostepneTerminy(dostepneTerminy);\r\n        })\r\n        .catch((error) => console.error('Błąd pobierania zajętych terminów:', error));\r\n    }\r\n  }, [lekarzId, selectedDate]);\r\n\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Dostępne terminy</h1>\r\n      <Calendar onChange={handleDateChange} value={selectedDate} />\r\n      {dostepneTerminy.length > 0 ? (\r\n  <div>\r\n    <h2>Dostępne terminy na {selectedDate.toLocaleDateString()}</h2>\r\n    <ul>\r\n      {dostepneTerminy.map((termin, index) => (\r\n        <li key={index}>\r\n          Data i godzina: {termin}\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </div>\r\n) : (\r\n  <p>Brak dostępnych terminów na wybrany dzień.</p>\r\n)}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DostepneTerminy;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}