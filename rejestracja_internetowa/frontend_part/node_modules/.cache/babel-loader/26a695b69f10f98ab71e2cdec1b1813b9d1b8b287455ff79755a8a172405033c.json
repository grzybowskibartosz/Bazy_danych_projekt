{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barto\\\\PycharmProjects\\\\bazy danych v1.0\\\\rejestracja_internetowa\\\\frontend_part\\\\src\\\\DostepneTerminy.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Calendar from 'react-calendar';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DostepneTerminy = () => {\n  _s();\n  const {\n    lekarzId\n  } = useParams();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [dostepneTerminy, setDostepneTerminy] = useState([]);\n  useEffect(() => {\n    if (lekarzId) {\n      // Przykładowa funkcja generująca dostępne terminy (na frontendzie)\n      const generujDostepneTerminy = () => {\n        // Tu możesz zaimplementować logikę generowania dostępnych terminów\n        // np. od dzisiaj do roku w przód\n        // Funkcja powinna zwrócić tablicę dat w formacie ISO string\n        // np. ['2023-01-01T08:00:00', '2023-01-01T09:00:00', ...]\n        // Poniżej znajduje się przykładowa implementacja\n        const dzis = new Date();\n        const rok = dzis.getFullYear();\n        const miesiac = dzis.getMonth();\n        const dzien = dzis.getDate();\n        const godzina = dzis.getHours();\n        const dostepneTerminy = [];\n        for (let i = 0; i < 365; i++) {\n          const nowyDzien = new Date(rok, miesiac, dzien + i, godzina); // Dla przykładu, zaczynamy od dzisiaj\n          dostepneTerminy.push(nowyDzien.toISOString());\n        }\n        return dostepneTerminy;\n      };\n      const rok = selectedDate.getFullYear();\n      const miesiac = selectedDate.getMonth() + 1;\n      const dzien = selectedDate.getDate();\n      axios.get(`http://localhost:8000/api/zajete-terminy/${lekarzId}/${rok}/${miesiac}/${dzien}/`).then(response => {\n        const zajeteTerminy = response.data.zajete_terminy.map(termin => termin.data_i_godzina);\n\n        // Pobierz wygenerowane dostępne terminy i usuń zajęte\n        const wolneTerminy = generujDostepneTerminy().filter(termin => !zajeteTerminy.includes(termin));\n        setDostepneTerminy(wolneTerminy);\n      }).catch(error => console.error('Błąd pobierania dostępnych terminów:', error));\n    }\n  }, [lekarzId, selectedDate]);\n  const handleDateChange = date => {\n    setSelectedDate(date);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dost\\u0119pne terminy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n      onChange: handleDateChange,\n      value: selectedDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), dostepneTerminy.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Dost\\u0119pne terminy na \", selectedDate.toLocaleDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: dostepneTerminy.map((termin, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Data i godzina: \", new Date(termin).toLocaleString()]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Brak dost\\u0119pnych termin\\xF3w na wybrany dzie\\u0144.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(DostepneTerminy, \"qORqBWGMgcuMjG+MTFb5JFG3LV4=\", false, function () {\n  return [useParams];\n});\n_c = DostepneTerminy;\nexport default DostepneTerminy;\nvar _c;\n$RefreshReg$(_c, \"DostepneTerminy\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","axios","useParams","jsxDEV","_jsxDEV","DostepneTerminy","_s","lekarzId","selectedDate","setSelectedDate","Date","dostepneTerminy","setDostepneTerminy","generujDostepneTerminy","dzis","rok","getFullYear","miesiac","getMonth","dzien","getDate","godzina","getHours","i","nowyDzien","push","toISOString","get","then","response","zajeteTerminy","data","zajete_terminy","map","termin","data_i_godzina","wolneTerminy","filter","includes","catch","error","console","handleDateChange","date","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","value","length","toLocaleDateString","index","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/barto/PycharmProjects/bazy danych v1.0/rejestracja_internetowa/frontend_part/src/DostepneTerminy.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst DostepneTerminy = () => {\r\n  const { lekarzId } = useParams();\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [dostepneTerminy, setDostepneTerminy] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (lekarzId) {\r\n      // Przykładowa funkcja generująca dostępne terminy (na frontendzie)\r\n      const generujDostepneTerminy = () => {\r\n        // Tu możesz zaimplementować logikę generowania dostępnych terminów\r\n        // np. od dzisiaj do roku w przód\r\n        // Funkcja powinna zwrócić tablicę dat w formacie ISO string\r\n        // np. ['2023-01-01T08:00:00', '2023-01-01T09:00:00', ...]\r\n        // Poniżej znajduje się przykładowa implementacja\r\n        const dzis = new Date();\r\n        const rok = dzis.getFullYear();\r\n        const miesiac = dzis.getMonth();\r\n        const dzien = dzis.getDate();\r\n        const godzina = dzis.getHours();\r\n\r\n        const dostepneTerminy = [];\r\n        for (let i = 0; i < 365; i++) {\r\n          const nowyDzien = new Date(rok, miesiac, dzien + i, godzina); // Dla przykładu, zaczynamy od dzisiaj\r\n          dostepneTerminy.push(nowyDzien.toISOString());\r\n        }\r\n        return dostepneTerminy;\r\n      };\r\n\r\n      const rok = selectedDate.getFullYear();\r\n      const miesiac = selectedDate.getMonth() + 1;\r\n      const dzien = selectedDate.getDate();\r\n\r\n      axios.get(`http://localhost:8000/api/zajete-terminy/${lekarzId}/${rok}/${miesiac}/${dzien}/`)\r\n        .then(response => {\r\n          const zajeteTerminy = response.data.zajete_terminy.map(termin => termin.data_i_godzina);\r\n\r\n          // Pobierz wygenerowane dostępne terminy i usuń zajęte\r\n          const wolneTerminy = generujDostepneTerminy().filter(termin => !zajeteTerminy.includes(termin));\r\n\r\n          setDostepneTerminy(wolneTerminy);\r\n        })\r\n        .catch(error => console.error('Błąd pobierania dostępnych terminów:', error));\r\n    }\r\n  }, [lekarzId, selectedDate]);\r\n\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Dostępne terminy</h1>\r\n      <Calendar onChange={handleDateChange} value={selectedDate} />\r\n      {dostepneTerminy.length > 0 ? (\r\n        <div>\r\n          <h2>Dostępne terminy na {selectedDate.toLocaleDateString()}</h2>\r\n          <ul>\r\n            {dostepneTerminy.map((termin, index) => (\r\n              <li key={index}>\r\n                Data i godzina: {new Date(termin).toLocaleString()}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ) : (\r\n        <p>Brak dostępnych terminów na wybrany dzień.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DostepneTerminy;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM;IAAEC;EAAS,CAAC,GAAGL,SAAS,CAAC,CAAC;EAChC,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,IAAIY,IAAI,CAAC,CAAC,CAAC;EAC5D,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAE1DC,SAAS,CAAC,MAAM;IACd,IAAIQ,QAAQ,EAAE;MACZ;MACA,MAAMM,sBAAsB,GAAGA,CAAA,KAAM;QACnC;QACA;QACA;QACA;QACA;QACA,MAAMC,IAAI,GAAG,IAAIJ,IAAI,CAAC,CAAC;QACvB,MAAMK,GAAG,GAAGD,IAAI,CAACE,WAAW,CAAC,CAAC;QAC9B,MAAMC,OAAO,GAAGH,IAAI,CAACI,QAAQ,CAAC,CAAC;QAC/B,MAAMC,KAAK,GAAGL,IAAI,CAACM,OAAO,CAAC,CAAC;QAC5B,MAAMC,OAAO,GAAGP,IAAI,CAACQ,QAAQ,CAAC,CAAC;QAE/B,MAAMX,eAAe,GAAG,EAAE;QAC1B,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;UAC5B,MAAMC,SAAS,GAAG,IAAId,IAAI,CAACK,GAAG,EAAEE,OAAO,EAAEE,KAAK,GAAGI,CAAC,EAAEF,OAAO,CAAC,CAAC,CAAC;UAC9DV,eAAe,CAACc,IAAI,CAACD,SAAS,CAACE,WAAW,CAAC,CAAC,CAAC;QAC/C;QACA,OAAOf,eAAe;MACxB,CAAC;MAED,MAAMI,GAAG,GAAGP,YAAY,CAACQ,WAAW,CAAC,CAAC;MACtC,MAAMC,OAAO,GAAGT,YAAY,CAACU,QAAQ,CAAC,CAAC,GAAG,CAAC;MAC3C,MAAMC,KAAK,GAAGX,YAAY,CAACY,OAAO,CAAC,CAAC;MAEpCnB,KAAK,CAAC0B,GAAG,CAAE,4CAA2CpB,QAAS,IAAGQ,GAAI,IAAGE,OAAQ,IAAGE,KAAM,GAAE,CAAC,CAC1FS,IAAI,CAACC,QAAQ,IAAI;QAChB,MAAMC,aAAa,GAAGD,QAAQ,CAACE,IAAI,CAACC,cAAc,CAACC,GAAG,CAACC,MAAM,IAAIA,MAAM,CAACC,cAAc,CAAC;;QAEvF;QACA,MAAMC,YAAY,GAAGvB,sBAAsB,CAAC,CAAC,CAACwB,MAAM,CAACH,MAAM,IAAI,CAACJ,aAAa,CAACQ,QAAQ,CAACJ,MAAM,CAAC,CAAC;QAE/FtB,kBAAkB,CAACwB,YAAY,CAAC;MAClC,CAAC,CAAC,CACDG,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC,CAAC;IACjF;EACF,CAAC,EAAE,CAACjC,QAAQ,EAAEC,YAAY,CAAC,CAAC;EAE5B,MAAMkC,gBAAgB,GAAIC,IAAI,IAAK;IACjClC,eAAe,CAACkC,IAAI,CAAC;EACvB,CAAC;EAED,oBACEvC,OAAA;IAAAwC,QAAA,gBACExC,OAAA;MAAAwC,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzB5C,OAAA,CAACJ,QAAQ;MAACiD,QAAQ,EAAEP,gBAAiB;MAACQ,KAAK,EAAE1C;IAAa;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC5DrC,eAAe,CAACwC,MAAM,GAAG,CAAC,gBACzB/C,OAAA;MAAAwC,QAAA,gBACExC,OAAA;QAAAwC,QAAA,GAAI,2BAAoB,EAACpC,YAAY,CAAC4C,kBAAkB,CAAC,CAAC;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAChE5C,OAAA;QAAAwC,QAAA,EACGjC,eAAe,CAACsB,GAAG,CAAC,CAACC,MAAM,EAAEmB,KAAK,kBACjCjD,OAAA;UAAAwC,QAAA,GAAgB,kBACE,EAAC,IAAIlC,IAAI,CAACwB,MAAM,CAAC,CAACoB,cAAc,CAAC,CAAC;QAAA,GAD3CD,KAAK;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,gBAEN5C,OAAA;MAAAwC,QAAA,EAAG;IAA0C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACjD;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC1C,EAAA,CArEID,eAAe;EAAA,QACEH,SAAS;AAAA;AAAAqD,EAAA,GAD1BlD,eAAe;AAuErB,eAAeA,eAAe;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}