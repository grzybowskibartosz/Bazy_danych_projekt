{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barto\\\\PycharmProjects\\\\bazy danych v1.0\\\\rejestracja_internetowa\\\\frontend_part\\\\src\\\\DostepneTerminy.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Calendar from 'react-calendar';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DostepneTerminy = () => {\n  _s();\n  const {\n    lekarzId\n  } = useParams();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [dostepneTerminy, setDostepneTerminy] = useState([]);\n  useEffect(() => {\n    if (lekarzId) {\n      const rok = selectedDate.getFullYear();\n      const miesiac = selectedDate.getMonth() + 1;\n      const dzien = selectedDate.getDate();\n\n      // Automatyczne generowanie godzin co 20 minut od 8:00 do 16:00 codziennie od poniedziałku do piątku\n      const godzinyTerminow = generujGodzinyTerminow();\n\n      // Symulacja generowania dostępnych terminów dla danego dnia\n      const wszystkieTerminy = godzinyTerminow.map(godzina => {\n        const dataIGodzina = new Date(selectedDate);\n        const [godzinaStr, minutaStr] = godzina.split(':');\n        dataIGodzina.setHours(Number(godzinaStr));\n        dataIGodzina.setMinutes(Number(minutaStr));\n        return {\n          data_i_godzina: dataIGodzina.toISOString()\n        };\n      });\n      setDostepneTerminy(wszystkieTerminy);\n    }\n  }, [lekarzId, selectedDate]);\n  const handleDateChange = date => {\n    setSelectedDate(date);\n  };\n\n  // Funkcja do automatycznego generowania godzin co 20 minut od 8:00 do 16:00 codziennie od poniedziałku do piątku\n  const generujGodzinyTerminow = () => {\n    const godziny = [];\n    for (let godzina = 8; godzina < 16; godzina++) {\n      for (let minuta = 0; minuta < 60; minuta += 20) {\n        godziny.push(`${godzina.toString().padStart(2, '0')}:${minuta.toString().padStart(2, '0')}`);\n      }\n    }\n    return godziny;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dost\\u0119pne terminy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n      onChange: handleDateChange,\n      value: selectedDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), dostepneTerminy.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Dost\\u0119pne terminy na \", selectedDate.toLocaleDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: dostepneTerminy.map((termin, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Data i godzina: \", new Date(termin.data_i_godzina).toLocaleString()]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Brak dost\\u0119pnych termin\\xF3w na wybrany dzie\\u0144.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(DostepneTerminy, \"qORqBWGMgcuMjG+MTFb5JFG3LV4=\", false, function () {\n  return [useParams];\n});\n_c = DostepneTerminy;\nexport default DostepneTerminy;\nvar _c;\n$RefreshReg$(_c, \"DostepneTerminy\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","axios","useParams","jsxDEV","_jsxDEV","DostepneTerminy","_s","lekarzId","selectedDate","setSelectedDate","Date","dostepneTerminy","setDostepneTerminy","rok","getFullYear","miesiac","getMonth","dzien","getDate","godzinyTerminow","generujGodzinyTerminow","wszystkieTerminy","map","godzina","dataIGodzina","godzinaStr","minutaStr","split","setHours","Number","setMinutes","data_i_godzina","toISOString","handleDateChange","date","godziny","minuta","push","toString","padStart","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","value","length","toLocaleDateString","termin","index","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/barto/PycharmProjects/bazy danych v1.0/rejestracja_internetowa/frontend_part/src/DostepneTerminy.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst DostepneTerminy = () => {\r\n  const { lekarzId } = useParams();\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [dostepneTerminy, setDostepneTerminy] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (lekarzId) {\r\n      const rok = selectedDate.getFullYear();\r\n      const miesiac = selectedDate.getMonth() + 1;\r\n      const dzien = selectedDate.getDate();\r\n\r\n      // Automatyczne generowanie godzin co 20 minut od 8:00 do 16:00 codziennie od poniedziałku do piątku\r\n      const godzinyTerminow = generujGodzinyTerminow();\r\n\r\n      // Symulacja generowania dostępnych terminów dla danego dnia\r\n      const wszystkieTerminy = godzinyTerminow.map(godzina => {\r\n        const dataIGodzina = new Date(selectedDate);\r\n        const [godzinaStr, minutaStr] = godzina.split(':');\r\n        dataIGodzina.setHours(Number(godzinaStr));\r\n        dataIGodzina.setMinutes(Number(minutaStr));\r\n        return { data_i_godzina: dataIGodzina.toISOString() };\r\n      });\r\n\r\n      setDostepneTerminy(wszystkieTerminy);\r\n    }\r\n  }, [lekarzId, selectedDate]);\r\n\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n\r\n  // Funkcja do automatycznego generowania godzin co 20 minut od 8:00 do 16:00 codziennie od poniedziałku do piątku\r\n  const generujGodzinyTerminow = () => {\r\n    const godziny = [];\r\n    for (let godzina = 8; godzina < 16; godzina++) {\r\n      for (let minuta = 0; minuta < 60; minuta += 20) {\r\n        godziny.push(`${godzina.toString().padStart(2, '0')}:${minuta.toString().padStart(2, '0')}`);\r\n      }\r\n    }\r\n    return godziny;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Dostępne terminy</h1>\r\n      <Calendar onChange={handleDateChange} value={selectedDate} />\r\n      {dostepneTerminy.length > 0 ? (\r\n        <div>\r\n          <h2>Dostępne terminy na {selectedDate.toLocaleDateString()}</h2>\r\n          <ul>\r\n            {dostepneTerminy.map((termin, index) => (\r\n              <li key={index}>\r\n                Data i godzina: {new Date(termin.data_i_godzina).toLocaleString()}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ) : (\r\n        <p>Brak dostępnych terminów na wybrany dzień.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DostepneTerminy;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}