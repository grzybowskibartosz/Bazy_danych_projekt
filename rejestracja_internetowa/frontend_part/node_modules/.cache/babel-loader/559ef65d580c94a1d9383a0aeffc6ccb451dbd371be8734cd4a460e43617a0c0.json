{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barto\\\\PycharmProjects\\\\bazy danych v1.0\\\\rejestracja_internetowa\\\\frontend_part\\\\src\\\\Rezerwacje.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Rezerwacje = () => {\n  _s();\n  const [lekarz, setLekarz] = useState({}); // Dane lekarza\n  const [gabinet, setGabinet] = useState({}); // Dane gabinetu\n  const [termin, setTermin] = useState(new Date()); // Wybrany termin\n  const [pacjent, setPacjent] = useState({}); // Dane pacjenta\n  const [opis, setOpis] = useState(''); // Opis problemu\n\n  useEffect(() => {\n    // Pobierz dane pacjenta z API za pomocą tokenu autoryzacyjnego\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      axios.get('http://localhost:8000/api/get_user_info/', {\n        headers: {\n          Authorization: `Token ${token}`\n        }\n      }).then(response => {\n        setPacjent(response.data);\n\n        // Pobierz dane lekarza na podstawie wcześniejszego wyboru pacjenta\n        axios.get(`http://localhost:8000/api/lekarze/${response.data.wybrany_lekarz_id}/`).then(response => setLekarz(response.data)).catch(error => console.error('Błąd pobierania danych lekarza:', error));\n\n        // Pobierz dane gabinetu na podstawie wcześniejszego wyboru pacjenta\n        axios.get(`http://localhost:8000/api/gabinety/${response.data.wybrany_gabinet_id}/`).then(response => setGabinet(response.data)).catch(error => console.error('Błąd pobierania danych gabinetu:', error));\n      }).catch(error => console.error('Błąd pobierania danych pacjenta:', error));\n    }\n  }, []); // Ustaw puste zależności, aby useEffect wykonał się tylko raz po zamontowaniu komponentu\n\n  const handleRezerwacja = () => {\n    // Przygotuj dane do wysłania na serwer\n    const dataDoWyslania = {\n      data_i_godzina: termin.toISOString(),\n      lekarz_id: lekarz.id,\n      pacjent_id: pacjent.id,\n      opis: opis,\n      gabinet_id: gabinet.id\n    };\n\n    // Wyślij żądanie na serwer\n    axios.post('http://localhost:8000/api/rezerwacja/', dataDoWyslania, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('authToken')}`\n      }\n    }).then(response => {\n      console.log(response.data.message);\n      // Tutaj możesz obsłużyć dalsze kroki po udanej rezerwacji, np. przekierowanie\n    }).catch(error => console.error('Błąd rezerwacji:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Rezerwacja wizyty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Informacje:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Lekarz: \", lekarz.imie, \" \", lekarz.nazwisko]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Gabinet: \", gabinet.numer]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Termin: \", termin.toLocaleString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Pacjent: \", pacjent.imie, \" \", pacjent.nazwisko]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Opis problemu:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: opis,\n      onChange: e => setOpis(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRezerwacja,\n      children: \"Zarezerwuj\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(Rezerwacje, \"V207faaNHcMwDjHdRS+have25Tk=\");\n_c = Rezerwacje;\nexport default Rezerwacje;\nvar _c;\n$RefreshReg$(_c, \"Rezerwacje\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Rezerwacje","_s","lekarz","setLekarz","gabinet","setGabinet","termin","setTermin","Date","pacjent","setPacjent","opis","setOpis","token","localStorage","getItem","get","headers","Authorization","then","response","data","wybrany_lekarz_id","catch","error","console","wybrany_gabinet_id","handleRezerwacja","dataDoWyslania","data_i_godzina","toISOString","lekarz_id","id","pacjent_id","gabinet_id","post","log","message","children","fileName","_jsxFileName","lineNumber","columnNumber","imie","nazwisko","numer","toLocaleString","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/barto/PycharmProjects/bazy danych v1.0/rejestracja_internetowa/frontend_part/src/Rezerwacje.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Rezerwacje = () => {\r\n  const [lekarz, setLekarz] = useState({}); // Dane lekarza\r\n  const [gabinet, setGabinet] = useState({}); // Dane gabinetu\r\n  const [termin, setTermin] = useState(new Date()); // Wybrany termin\r\n  const [pacjent, setPacjent] = useState({}); // Dane pacjenta\r\n  const [opis, setOpis] = useState(''); // Opis problemu\r\n\r\n  useEffect(() => {\r\n// Pobierz dane pacjenta z API za pomocą tokenu autoryzacyjnego\r\n    const token = localStorage.getItem('authToken');\r\n\r\n    if (token) {\r\n      axios.get('http://localhost:8000/api/get_user_info/', {\r\n        headers: {\r\n          Authorization: `Token ${token}`,\r\n        },\r\n      })\r\n      .then(response => {\r\n        setPacjent(response.data);\r\n\r\n      // Pobierz dane lekarza na podstawie wcześniejszego wyboru pacjenta\r\n      axios.get(`http://localhost:8000/api/lekarze/${response.data.wybrany_lekarz_id}/`)\r\n        .then(response => setLekarz(response.data))\r\n        .catch(error => console.error('Błąd pobierania danych lekarza:', error));\r\n\r\n      // Pobierz dane gabinetu na podstawie wcześniejszego wyboru pacjenta\r\n      axios.get(`http://localhost:8000/api/gabinety/${response.data.wybrany_gabinet_id}/`)\r\n        .then(response => setGabinet(response.data))\r\n        .catch(error => console.error('Błąd pobierania danych gabinetu:', error));\r\n      })\r\n      .catch(error => console.error('Błąd pobierania danych pacjenta:', error));\r\n    }\r\n  }, []); // Ustaw puste zależności, aby useEffect wykonał się tylko raz po zamontowaniu komponentu\r\n\r\n  const handleRezerwacja = () => {\r\n    // Przygotuj dane do wysłania na serwer\r\n    const dataDoWyslania = {\r\n      data_i_godzina: termin.toISOString(),\r\n      lekarz_id: lekarz.id,\r\n      pacjent_id: pacjent.id,\r\n      opis: opis,\r\n      gabinet_id: gabinet.id,\r\n    };\r\n\r\n    // Wyślij żądanie na serwer\r\n    axios.post('http://localhost:8000/api/rezerwacja/', dataDoWyslania, {\r\n      headers: {\r\n        Authorization: `Bearer ${localStorage.getItem('authToken')}`,\r\n      },\r\n    })\r\n      .then(response => {\r\n        console.log(response.data.message);\r\n        // Tutaj możesz obsłużyć dalsze kroki po udanej rezerwacji, np. przekierowanie\r\n      })\r\n      .catch(error => console.error('Błąd rezerwacji:', error));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Rezerwacja wizyty</h1>\r\n      <p>Informacje:</p>\r\n      <p>Lekarz: {lekarz.imie} {lekarz.nazwisko}</p>\r\n      <p>Gabinet: {gabinet.numer}</p>\r\n      <p>Termin: {termin.toLocaleString()}</p>\r\n      <p>Pacjent: {pacjent.imie} {pacjent.nazwisko}</p>\r\n      <p>Opis problemu:</p>\r\n      <textarea value={opis} onChange={(e) => setOpis(e.target.value)} />\r\n      <br />\r\n      <button onClick={handleRezerwacja}>Zarezerwuj</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Rezerwacje;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}