{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barto\\\\PycharmProjects\\\\bazy danych v1.0\\\\rejestracja_internetowa\\\\frontend_part\\\\src\\\\DostepneTerminy.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Calendar from 'react-calendar';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DostepneTerminy = () => {\n  _s();\n  const {\n    lekarzId\n  } = useParams();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [dostepneTerminy, setDostepneTerminy] = useState([]);\n  useEffect(() => {\n    if (lekarzId) {\n      const rok = selectedDate.getFullYear();\n      const miesiac = selectedDate.getMonth() + 1;\n      const dzien = selectedDate.getDate();\n\n      // Symulacja generowania dostępnych terminów dla danego dnia\n      const wszystkieTerminy = generujWszystkieTerminyDlaDnia(selectedDate);\n      setDostepneTerminy(wszystkieTerminy);\n    }\n  }, [lekarzId, selectedDate]);\n  const handleDateChange = date => {\n    setSelectedDate(date);\n  };\n\n  // Funkcja do generowania wszystkich terminów dla danego dnia (symulacja)\n  const generujWszystkieTerminyDlaDnia = data => {\n    const godzinyTerminow = ['09:00', '10:00', '11:00', '14:00', '15:00', '16:00']; // Dodaj inne godziny według potrzeb\n    return godzinyTerminow.map(godzina => {\n      const dataIGodzina = new Date(data);\n      const [godzinaStr, minutaStr] = godzina.split(':');\n      dataIGodzina.setHours(Number(godzinaStr));\n      dataIGodzina.setMinutes(Number(minutaStr));\n      return {\n        data_i_godzina: dataIGodzina.toISOString()\n      };\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dost\\u0119pne terminy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n      onChange: handleDateChange,\n      value: selectedDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), dostepneTerminy.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Dost\\u0119pne terminy na \", selectedDate.toLocaleDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: dostepneTerminy.map((termin, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Data i godzina: \", new Date(termin.data_i_godzina).toLocaleString()]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Brak dost\\u0119pnych termin\\xF3w na wybrany dzie\\u0144.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(DostepneTerminy, \"qORqBWGMgcuMjG+MTFb5JFG3LV4=\", false, function () {\n  return [useParams];\n});\n_c = DostepneTerminy;\nexport default DostepneTerminy;\nvar _c;\n$RefreshReg$(_c, \"DostepneTerminy\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","axios","useParams","jsxDEV","_jsxDEV","DostepneTerminy","_s","lekarzId","selectedDate","setSelectedDate","Date","dostepneTerminy","setDostepneTerminy","rok","getFullYear","miesiac","getMonth","dzien","getDate","wszystkieTerminy","generujWszystkieTerminyDlaDnia","handleDateChange","date","data","godzinyTerminow","map","godzina","dataIGodzina","godzinaStr","minutaStr","split","setHours","Number","setMinutes","data_i_godzina","toISOString","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","value","length","toLocaleDateString","termin","index","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/barto/PycharmProjects/bazy danych v1.0/rejestracja_internetowa/frontend_part/src/DostepneTerminy.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst DostepneTerminy = () => {\r\n  const { lekarzId } = useParams();\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [dostepneTerminy, setDostepneTerminy] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (lekarzId) {\r\n      const rok = selectedDate.getFullYear();\r\n      const miesiac = selectedDate.getMonth() + 1;\r\n      const dzien = selectedDate.getDate();\r\n\r\n      // Symulacja generowania dostępnych terminów dla danego dnia\r\n      const wszystkieTerminy = generujWszystkieTerminyDlaDnia(selectedDate);\r\n      setDostepneTerminy(wszystkieTerminy);\r\n    }\r\n  }, [lekarzId, selectedDate]);\r\n\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n\r\n  // Funkcja do generowania wszystkich terminów dla danego dnia (symulacja)\r\n  const generujWszystkieTerminyDlaDnia = (data) => {\r\n    const godzinyTerminow = ['09:00', '10:00', '11:00', '14:00', '15:00', '16:00']; // Dodaj inne godziny według potrzeb\r\n    return godzinyTerminow.map(godzina => {\r\n      const dataIGodzina = new Date(data);\r\n      const [godzinaStr, minutaStr] = godzina.split(':');\r\n      dataIGodzina.setHours(Number(godzinaStr));\r\n      dataIGodzina.setMinutes(Number(minutaStr));\r\n      return { data_i_godzina: dataIGodzina.toISOString() };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Dostępne terminy</h1>\r\n      <Calendar onChange={handleDateChange} value={selectedDate} />\r\n      {dostepneTerminy.length > 0 ? (\r\n        <div>\r\n          <h2>Dostępne terminy na {selectedDate.toLocaleDateString()}</h2>\r\n          <ul>\r\n            {dostepneTerminy.map((termin, index) => (\r\n              <li key={index}>\r\n                Data i godzina: {new Date(termin.data_i_godzina).toLocaleString()}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ) : (\r\n        <p>Brak dostępnych terminów na wybrany dzień.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DostepneTerminy;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}